#!/usr/bin/env php
<?php
declare(strict_types=1);

if (isset($argv[1]) && $argv[1] === 'install') {
    $installer = new class {

        public function __invoke(): void
        {
            if (!getenv('APP_HOME')) {
                throw new RuntimeException('Missing environment variable APP_HOME');
            }

            $this->output('Installing PHAR dependencies ...');

            foreach ($this->getTools() as $definition) {
                $target = getenv('APP_HOME') . '/' . $definition['target'];

                if (file_exists($target) && hash_file('sha256', $target) === $definition['sha256']) {
                    continue;
                }

                $this->installTool($target, $definition['source']);
            }

            $this->output('Installing composer dependencies ...');
            $this->runCommand('composer.phar install --optimize-autoloader --no-progress --no-cache');
            $this->output('Installation complete.');
        }

        private function output(string $message): void
        {
            echo $message . PHP_EOL;
        }

        private function getTools(): Iterator
        {
            $composerJsonPath = realpath(getenv('APP_HOME') . '/composer.json');
            $composerConfig = json_decode(file_get_contents($composerJsonPath), true);

            if (isset($composerConfig['extra']['phar-tools'])) {
                yield from $composerConfig['extra']['phar-tools'];
            }
        }

        private function installTool(string $target, string $source): void
        {
            $this->output(sprintf('Installing %s ...', $target));
            $result = stream_copy_to_stream(
                fopen($source, 'r'),
                fopen($target, 'w')
            );
            if (false === $result) {
                throw new RuntimeException(sprintf('Failed to install %s', $target));
            }
            chmod($target, 0755);
        }

        private function runCommand(string $command): void
        {
            system($command, $exitCode);

            if ($exitCode !== 0) {
                throw new RuntimeException("Failed to run command '$command'. Exit-Code: $exitCode");
            }
        }
    };

    $installer();
    exit(0);
}

if (!file_exists(__DIR__ . '/../vendor/autoload.php')) {
    die('Missing autoloader. Please run "lima install".');
}

require_once __DIR__ . '/../vendor/autoload.php';

$container = \HexagonalPlayground\Infrastructure\ContainerBuilder::build();
$app = $container->get(\Symfony\Component\Console\Application::class);
$app->run();
